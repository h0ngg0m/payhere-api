def get_chosung(text) -> str:
    """
    한글 유니코드 문자는 0xAC00 ('가')부터 시작하여 각각의 한글 문자가 초성, 중성, 종성의 조합으로 표현됩니다. 한글 문자 하나는 다음과 같이 구성됩니다:

    초성: 19가지 (ㄱ, ㄲ, ㄴ, ...)
    중성: 21가지 (ㅏ, ㅐ, ㅑ, ...)
    종성: 28가지 (없음, ㄱ, ㄲ, ...)
    한글 문자 하나는 이 세 가지 요소의 조합으로 이루어지며, 이 조합의 총 개수는 19 (초성) * 21 (중성) * 28 (종성) = 11,172개입니다.

    코드에서 ord(ch)는 문자 ch의 유니코드 값을 반환합니다. ord('가')는 한글 유니코드의 시작점인 '가'의 유니코드 값을 반환합니다. 따라서, ord(ch) - ord('가')는 주어진 한글 문자가 '가'부터 얼마나 떨어져 있는지를 나타내는 인덱스를 계산합니다.

    이제 한글 문자 하나당 588 (21 * 28)개의 조합이 가능하므로, // 588을 하여 해당 한글 문자의 초성 인덱스를 계산합니다. 이 인덱스는 CHOSUNG_LIST에서 해당 초성을 찾는 데 사용됩니다.

    예를 들어, '강'은 '가'로부터 28 (중성 한 개 분) * 1 (ㅏ 다음 ㅑ) + 1 (ㄱ 다음 ㄲ) = 29번째에 위치합니다. 따라서 ('강'의 유니코드 값 - '가'의 유니코드 값) // 588는 0이 되고, 이는 '강'의 초성이 'ㄱ'(0번 인덱스)임을 의미합니다.
    """
    CHOSUNG_LIST = [
        "ㄱ",
        "ㄲ",
        "ㄴ",
        "ㄷ",
        "ㄸ",
        "ㄹ",
        "ㅁ",
        "ㅂ",
        "ㅃ",
        "ㅅ",
        "ㅆ",
        "ㅇ",
        "ㅈ",
        "ㅉ",
        "ㅊ",
        "ㅋ",
        "ㅌ",
        "ㅍ",
        "ㅎ",
    ]

    def is_hangul(ch) -> bool:
        return "가" <= ch <= "힣"

    def extract_chosung(ch) -> str:
        if is_hangul(ch):
            chosung_index = (ord(ch) - ord("가")) // 588
            return CHOSUNG_LIST[chosung_index]
        else:
            return ch

    return "".join(extract_chosung(ch) for ch in text)
